var marked = require('marked')
var hljs = require('highlight.js')
var merge = require('./merge').merge
var extend = require('util')._extend

/*
 * Work
 */

if (!module.parent) {
  var files = process.argv.slice(2)
  try {
    var re = work(files)
    console.log(JSON.stringify(re))
  } catch (e) {
    console.warn('')
    console.warn('\x1b[31m error: \x1b[0m' + e.message)
    console.warn(e.stack)
    console.warn('')
    process.exit(16)
  }
}

/**
 * Works on given `files`, an array of files.
 * Returns a JSON that looks:
 *
 *     {
 *       outline: { ... },
 *       languages: {
 *         javascript: { ... },
 *         ruby: { ... }
 *       }
 *    }
 */

function work (files) {
  var re = {
    "-": [
      "---",
      "--- This file is autogenerated.",
      "--- Please don't edit this file.",
      "---",
    ],
    languages: {},
    bundles: {}
  }

  var output, data, name, bundle

  // step 1: build each file
  files.forEach(function (file) {
    data = require('fs').readFileSync(file, 'utf-8')
    name = require('path').basename(file, '.md')
    output = outlinify(data, {
      name: name,
      hljsLanguage: name.toLowerCase()
    })

    // Initialize the `bundle`
    var bundleName = output.meta.bundle
    if (!re.bundles[bundleName]) {
      bundle = {
        outline: undefined,
        languages: {}
      }

      re.bundles[bundleName] = bundle
    }

    // Add it to languages in the bundle
    bundle.languages[name] = output.sections
    if (!re.languages[name]) re.languages[name] = {}
    extend(re.languages[name], output.meta)
  })

  // Make the outlines of each bundle
  Object.keys(re.bundles).forEach(function (name) {
    var bundle = re.bundles[name]
    bundle.outline = merge(values(bundle.languages))
  })

  return re
}

/**
 * Works on a markdown document `md`.  Returns a JSON object of the language
 * documentation.
 *
 * Optional: provide `outline` (a reference) to throw an error if a section
 * isn't found in the outline.
 *
 *     outlinify("### Variables\n\n    var x = 1;")
 */

function outlinify (md, ctx) {
  var tokens = marked.lexer(md)
  var name = ctx && ctx.name
  var sections = {}
  var re = { meta: {}, sections: sections }
  var h2, h2text, h3, m

  tokens.forEach(function (t) {
    // token.type == 'heading' | 'paragraph' | 'code' | 'list_start' | 'list_item_start' | 'list_item_end'
    // token.text == '...' (paragraph, heading)
    // token.lang == 'rb' (code)
    // token.depth == 1 | 2 | 3
    //

    /* h1 */
    if (t.type === 'heading' && t.depth === 1) {
      if (!name) name = t.text
      re.meta.title = t.text
    }

    /* h2 */
    else if (t.type === 'heading' && t.depth === 2) {
      sections[t.text] = {}
      h2text = t.text
      h2 = sections[t.text]
    } 

    /* h3 */
    else if (t.type === 'heading' && t.depth === 3) {
      if (!h2)
        throw new Error(name + ": h3 found without h2")

      h2[t.text] = {}
      h3 = h2[t.text]
    }

    /* h3 > code */
    else if (t.type === 'code') {
      var lang = re.meta.highlight || name
      var html = highlight(lang, t.text)
      h3.code = html
    }

    /* h3 > text */
    else if (t.type === 'paragraph' && h3) {
      if (h3.text) {
        h3.text += "\n" + marked(t.text)
      } else {
        h3.text = marked(t.text)
      }
    }

    else if (t.type === 'list_start' && !h3) {}
    else if (t.type === 'list_item_start' && !h3) {}
    else if (t.type === 'list_item_end' && !h3) {}
    else if (t.type === 'list_end' && !h3) {}
    else if (t.type === 'space') {}

    else if (t.type === 'text' && !h3 &&
      (m = t.text.match(/^([^:]+): (.*?)$/))) {
      re.meta[m[1].toLowerCase()] = m[2]
    }

    else {
      throw new Error("Incompatible token: " + JSON.stringify(t))
    }
  })

  validate(re, name)

  return re
}

function highlight (lang, text) {
  var html = hljs.highlight(lang, text).value

  html = html
    .replace(
      /<span class="hljs-comment">(.*?)\.\.\.<\/span>/g,
      '<span class="hljs-ellipsis"></span>')
    .replace(
      /<span class="hljs-comment">[\/\#]+=&gt; (.*?)<\/span>/g,
      (_, result) => `<span class="hljs-result">${result}</span>`)
  return html
}

function validate (re, name) {
  if (!re.meta.title)
    throw new Error(name + ": needs title")
  if (!re.meta.bundle)
    throw new Error(name + ": needs bundle name")
}

module.exports = {
  outlinify: outlinify,
  work: work
}

function values (obj) {
  return Object.keys(obj).map(function (key) {
    return obj[key]
  })
}

