{
  "": [
    "---",
    "--- This file is autogenerated.",
    "--- Please don't edit this file.",
    "---"
  ],
  "languages": {
    "_outline": {
      "Variables": {
        "Local variables": {},
        "Global variables": {}
      },
      "Classes": {
        "Defining classes": {},
        "Basic instanciation": {},
        "Constructors": {},
        "Attributes": {}
      },
      "Arrays": {
        "Initializing (empty)": {},
        "Initializing (with contents)": {},
        "Length": {},
        "Adding items": {},
        "Removing items": {},
        "Checking for presence of items": {}
      }
    },
    "javascript": {
      "Variables": {
        "Local variables": {
          "text": "Use `var` to define local variables.",
          "code": "var myvar = 1;\nmyvar"
        },
        "Global variables": {
          "text": "The global context is in `window` (browser) or `global` (Node.js).",
          "code": "window.gvar = 1;"
        }
      },
      "Classes": {
        "Defining classes": {
          "text": "JavaScript doesn't have classes, it has prototypes.",
          "code": "function Shape() {\n  return this;\n}\n\nShape.prototype.area = function () {\n  return this.width * this.height;\n};"
        },
        "Basic instanciation": {
          "code": "instance = new Shape();"
        },
        "Attributes": {
          "code": "function Shape() {\n}\n\nShape.prototype.setDimensions = function(width, height) {\n  this.width = width;\n  this.height = height;\n};"
        }
      },
      "Arrays": {
        "Initializing (empty)": {
          "code": "list = [];"
        },
        "Initializing (with contents)": {
          "code": "list = [\"a\", \"b\", \"c\"];"
        },
        "Length": {
          "code": "list.length      //=> 3"
        },
        "Adding items": {
          "code": "list.push(\"d\");\n// list == [\"a\", \"b\", \"c\", \"d\"]\n\nlist.unshift(\"X\");\n// list == [\"X\", \"a\", \"b\", \"c\", \"d\"]"
        },
        "Removing items": {
          "code": "list.pop()    //=> \"d\" (last item)\n// list == [\"X\", \"a\", \"b\", \"c\"]\n\nlist.shift()  //=> \"X\" (first item)\n// list == [\"a\", \"b\", \"c\"]"
        },
        "Checking for presence of items": {
          "code": "if ([1, 2, 3].indexOf(2) > -1) { ... }"
        }
      }
    },
    "ruby": {
      "Variables": {
        "Local variables": {
          "code": "myvar = 1\nmyvar"
        },
        "Global variables": {
          "text": "Global variables are prefixed with `$`.\n\n[Read](http://www.rubyist.net/~slagell/ruby/globalvars.html)",
          "code": "$gvar = 1"
        }
      },
      "Classes": {
        "Defining classes": {
          "code": "class Shape\n  def area\n    width * height\n  end\nend"
        },
        "Basic instanciation": {
          "code": "instance = Shape.new"
        },
        "Constructors": {
          "code": "class Shape\n  def initialize(width, height)\n  end\nend"
        },
        "Attributes": {
          "code": "class Shape\n  attr_accessor :width\n  attr_accessor :height\n\n  def set_dimensions(width, height)\n    self.width = width\n    self.height = height\n  end"
        }
      },
      "Arrays": {
        "Initializing (empty)": {
          "code": "list = Array.new"
        },
        "Initializing (with contents)": {
          "code": "list = [\"a\", \"b\", \"c\"]\narr = %w[red green blue]"
        },
        "Length": {
          "code": "list.size      #=> 3\nlist.empty?\nlist.any?"
        },
        "Adding items": {
          "code": "list << \"d\"\nlist                #=> [\"a\", \"b\", \"c\", \"d\"]\n\nlist.unshift \"X\"\nlist                #=> [\"X\", \"a\", \"b\", \"c\", \"d\"]"
        },
        "Removing items": {
          "code": "list.pop      #=> \"d\" (last item)\nlist          #=> [\"X\", \"a\", \"b\", \"c\"]\n\nlist.shift    #=> \"X\" (first item)\nlist          #=> [\"a\", \"b\", \"c\"]"
        },
        "Checking for presence of items": {
          "code": "if [1, 2, 3].include?(2)"
        }
      }
    }
  }
}
