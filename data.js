window.Data=(
{"-":["---","--- This file is autogenerated.","--- Please don't edit this file.","---"],"languages":{"bash":{"highlight":"bash","bundle":"programming","title":"Bash"},"coffeescript":{"bundle":"programming","title":"CoffeeScript"},"elixir":{"highlight":"elixir","bundle":"programming","title":"Elixir"},"javascript-legacy":{"highlight":"javascript","bundle":"programming","title":"JavaScript (legacy)"},"javascript":{"highlight":"javascript","bundle":"programming","title":"JavaScript (ES2015)"},"python":{"bundle":"programming","title":"Python"},"ruby":{"bundle":"programming","title":"Ruby"}},"bundles":{"programming":{"outline":{"Functions":{"Defining functions":{},"Invoking":{},"Returning values":{},"Implicit returns":{},"Implicit returns (2)":{},"Anonymous functions":{},"Default values":{},"Splat":{},"Keyword arguments":{}},"Variables":{"Local variables":{},"Global variables":{},"Assignment":{},"Safe assignment":{},"Instance variables":{},"Class variables":{}},"Destructuring":{"Assignments":{},"Spreading":{},"Loops":{},"Functions":{}},"Classes":{"Defining classes":{},"Basic instanciation":{},"Constructors":{},"Attributes":{},"Setter/Getter":{},"Inheritance":{},"Type checking":{}},"Methods":{"Defining":{},"Class methods":{},"Running a method with an arbitrary name":{}},"Namespaces":{"Singleton pattern":{}},"Arrays":{"Initializing":{},"Assigning":{},"Accessing":{},"Shorthand":{},"Length":{},"Adding items":{},"Removing items":{},"Removing ranges":{},"Subsets":{},"Finding index":{},"Checking for presence":{},"Filtering":{},"Iteration":{}},"Types":{"Primitives":{},"Booleans":{},"Null":{},"Type checking":{},"Casting":{},"Ternary":{}},"Conditionals":{"If-then-else":{},"Conditions":{},"Equality":{},"Negative":{},"Single-line syntax":{},"Switch-case":{},"And-or":{},"Ternary":{}},"Numbers":{"Operations":{},"Rounding off":{},"Minimum and maximum":{},"Exponents":{},"Trigonometry":{}},"Strings":{"Literals":{},"Symbols":{},"Interpolation":{},"Concatenation":{},"Formatting":{},"Length":{},"Substring":{},"Search":{},"Case":{},"Replace":{},"Advanced replace":{}},"Dictionaries":{"Type":{},"Literals":{},"Access":{},"Setting":{},"List keys":{},"Shorthand":{},"Computed property names":{},"Functions":{},"Setters and getters":{},"List values":{},"Iterating":{}},"Modules":{"Importing":{}},"String representation":{"Getting":{},"Overriding":{}},"Exceptions":{"Try/catch":{}},"Iterables":{"Iterating":{},"Foreach loops":{},"Map":{},"Reduce":{}},"Printing":{"Printing":{},"Error output":{}},"File API":{"Require":{},"Reading":{},"Writing":{}},"System":{"Environment variables":{},"Arguments parsing":{}}},"languages":{"bash":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">greet</span></span> () {\n  <span class=\"hljs-built_in\">local</span> hi=<span class=\"hljs-variable\">$1</span>\n  <span class=\"hljs-built_in\">local</span> name=<span class=\"hljs-variable\">$2</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${hi}</span>, <span class=\"hljs-variable\">${name}</span>\"</span>\n}"},"Invoking":{"code":"greet <span class=\"hljs-string\">\"Hello\"</span> <span class=\"hljs-string\">\"John Watson\"</span>"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">square</span></span> () {\n  result=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${n}</span> * <span class=\"hljs-variable\">${n}</span>\"</span> | bc)\n  <span class=\"hljs-built_in\">echo</span> result\n}"}},"Variables":{"Local variables":{"code":"<span class=\"hljs-built_in\">local</span> myvar=<span class=\"hljs-string\">\"1\"</span>","text":"<p>Only works inside functions.</p>\n"},"Global variables":{"code":"myvar=<span class=\"hljs-string\">\"1\"</span>"},"Assignment":{"code":"myvar=<span class=\"hljs-string\">\"1\"</span>"}},"Arrays":{"Initializing":{"code":"<span class=\"hljs-built_in\">declare</span> <span class=\"hljs-operator\">-a</span> list=(<span class=\"hljs-string\">'a'</span> <span class=\"hljs-string\">'b'</span> <span class=\"hljs-string\">'c'</span>)"},"Assigning":{"code":"list[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">\"a\"</span>"},"Accessing":{"code":"<span class=\"hljs-variable\">${list[0]}</span>  <span class=\"hljs-result\">\"a\"</span>"},"Length":{"code":"<span class=\"hljs-variable\">${#list[@]}</span>"},"Iteration":{"code":"<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${list[@]}</span>\"</span>; <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span>\n<span class=\"hljs-keyword\">done</span>"}},"Types":{"Primitives":{"code":"String","text":"<p>Everything is a string.</p>\n"},"Booleans":{"code":"<span class=\"hljs-string\">\"1\"</span>\n<span class=\"hljs-string\">\"0\"</span>","text":"<p>Since everything is a string, <code>&quot;1&quot;</code> and <code>&quot;0&quot;</code> are conventionally used for true/false.</p>\n"}},"Conditionals":{"If-then-else":{"code":"<span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$a</span>\"</span> == <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$b</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">elif</span> [[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$b</span>\"</span> != <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$c</span>\"</span> ]]; <span class=\"hljs-keyword\">then</span>\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">fi</span>"},"Equality":{"code":"[[ <span class=\"hljs-string\">\"2\"</span> == <span class=\"hljs-string\">\"2\"</span> ]]  <span class=\"hljs-result\">true</span>\n[[ <span class=\"hljs-string\">\"2\"</span> != <span class=\"hljs-string\">\"2\"</span> ]]  <span class=\"hljs-result\">false</span>"},"Switch-case":{"code":"<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$day</span>\"</span> <span class=\"hljs-keyword\">in</span>\n  Monday)\n    work\n    ;;\n\n  Tuesday | Wednesday)\n    train\n    ;;\n\n  *)\n    sleep\n    ;;\n<span class=\"hljs-keyword\">esac</span>"}},"Strings":{"Literals":{"code":"<span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-string\">'world'</span>"},"Interpolation":{"code":"<span class=\"hljs-string\">\"Hello, <span class=\"hljs-variable\">${name}</span>\"</span>"},"Formatting":{"code":"<span class=\"hljs-built_in\">printf</span> <span class=\"hljs-string\">\"Hello, %s from %s\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$name</span>\"</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$city</span>\"</span>"},"Length":{"code":"`<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$string</span> | wc -c`"},"Case":{"code":"$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$string</span> | awk <span class=\"hljs-string\">'{print toupper($0)}'</span>)\n$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$string</span> | awk <span class=\"hljs-string\">'{print tolower($0)}'</span>)"}},"Printing":{"Printing":{"code":"<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"hello\"</span>"},"Error output":{"code":"<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"hello\"</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span>"}}},"coffeescript":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">greet</span> = <span class=\"hljs-params\">(hi, name)</span> -&gt;</span>\n  <span class=\"hljs-built_in\">console</span>.log <span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{hi}</span>, <span class=\"hljs-subst\">#{name}</span>\"</span>"},"Invoking":{"code":"greet <span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-string\">\"John\"</span>\ngreet(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-string\">\"John\"</span>)"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">square</span> = <span class=\"hljs-params\">(n)</span> -&gt;</span>\n  <span class=\"hljs-keyword\">return</span> n * n"},"Implicit returns":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">square</span> = <span class=\"hljs-params\">(n)</span> -&gt;</span>\n  n * n","text":"<p>The last statement&#39;s value is always returned.</p>\n"},"Anonymous functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">addOne</span> = <span class=\"hljs-params\">(n)</span> -&gt;</span> n + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-hr\"></span>addOne(<span class=\"hljs-number\">20</span>)"},"Splat":{"code":"<span class=\"hljs-function\"><span class=\"hljs-title\">greet</span> = <span class=\"hljs-params\">(hi, names...)</span> -&gt;</span>\n  <span class=\"hljs-result\">names == ['Moe', 'Curly']</span>\n\ngreet <span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-string\">'Curly'</span>"}},"Methods":{"Defining":{"code":"<span class=\"hljs-attribute\">MyClass</span>::method = <span class=\"hljs-function\">-&gt;</span>\n  <span class=\"hljs-ellipsis\"></span>"},"Class methods":{"code":"MyClass.method = <span class=\"hljs-function\">-&gt;</span>\n  <span class=\"hljs-ellipsis\"></span>\n\nMyClass.method()"},"Running a method with an arbitrary name":{"code":"obj[<span class=\"hljs-string\">'method_name'</span>](arg1, arg2)"}},"Types":{"Primitives":{"code":"Number\nArray\nBoolean\nDate\nString\nRegExp"},"Booleans":{"code":"<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">on</span>\n<span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">off</span>"},"Null":{"code":"<span class=\"hljs-literal\">null</span>\n<span class=\"hljs-literal\">undefined</span>"}},"Conditionals":{"If-then-else":{"code":"<span class=\"hljs-keyword\">if</span> a == b\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> b != c\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-ellipsis\"></span>"},"Equality":{"code":"<span class=\"hljs-string\">'2'</span> == <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">false</span>\n<span class=\"hljs-string\">'2'</span> <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-string\">'2'</span> != <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">false</span>\n<span class=\"hljs-string\">'2'</span> <span class=\"hljs-keyword\">isnt</span> <span class=\"hljs-number\">2</span>","text":"<p>The <code>==</code> and <code>!=</code> operators are equivalent to JavaScript&#39;s <code>===</code> and <code>!==</code> respectively.</p>\n"}}},"elixir":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Greeter</span></span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span></span>(hi, name) <span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-constant\">IO.</span>puts <span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{hi}</span>, <span class=\"hljs-subst\">#{name}</span>\"</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Invoking":{"code":"<span class=\"hljs-constant\">Greeter.</span>greet(<span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-string\">\"John\"</span>)\n<span class=\"hljs-constant\">Greeter.</span>greet <span class=\"hljs-string\">\"Hello\"</span>, <span class=\"hljs-string\">\"John\"</span>  <span class=\"hljs-comment\"># parens optional</span>"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span></span>(n) <span class=\"hljs-keyword\">do</span>\n  n * n\n<span class=\"hljs-keyword\">end</span>","text":"<p>Returns are always implicit (last statement returns)</p>\n"},"Anonymous functions":{"code":"addOne = (fn n -&gt; n + 1; end)\naddOne.(20)\n\naddOne = &amp;(&amp;1 + 1)  # &amp;1 is the first argument\naddOne.(20)\n\nadd = &amp;+/2\nadd.(2, 3)"}},"Variables":{"Local variables":{"code":"myvar = <span class=\"hljs-number\">1</span>","text":"<p>Actually the <em>pattern matching operator</em>.</p>\n"},"Assignment":{"code":"myvar = <span class=\"hljs-number\">1</span>"}},"Destructuring":{"Assignments":{"code":"{first, last} = {<span class=\"hljs-string\">\"Nikola\"</span>, <span class=\"hljs-string\">\"Tesla\"</span>}"},"Spreading":{"code":"[ head | tail ] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\nhead  <span class=\"hljs-result\">1</span>\ntail  <span class=\"hljs-result\">[2, 3, 4]</span>"}},"Types":{"Primitives":{"code":"<span class=\"hljs-symbol\">:atom</span>        <span class=\"hljs-comment\"># atom</span>\n<span class=\"hljs-string\">\"bitstring\"</span>  <span class=\"hljs-comment\"># bitstring</span>\n<span class=\"hljs-keyword\">true</span>, <span class=\"hljs-keyword\">false</span>  <span class=\"hljs-comment\"># boolean</span>\n<span class=\"hljs-keyword\">fn</span> x -&gt; <span class=\"hljs-keyword\">end</span>  <span class=\"hljs-comment\"># function</span>\n<span class=\"hljs-number\">23</span>           <span class=\"hljs-comment\"># integer (number)</span>\n<span class=\"hljs-number\">23.0</span>         <span class=\"hljs-comment\"># float (number)</span>\n\n&lt;&lt;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>&gt;&gt;          <span class=\"hljs-comment\"># binary</span>\n[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]            <span class=\"hljs-comment\"># list</span>\n%{<span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">\"John\"</span>}  <span class=\"hljs-comment\"># map</span>\n{<span class=\"hljs-symbol\">:a</span>, <span class=\"hljs-symbol\">:b</span>}         <span class=\"hljs-comment\"># tuple</span>\n\n<span class=\"hljs-keyword\">nil</span>      <span class=\"hljs-comment\"># is_nil</span>"},"Booleans":{"code":"<span class=\"hljs-keyword\">true</span>\n<span class=\"hljs-keyword\">false</span>"},"Null":{"code":"<span class=\"hljs-keyword\">nil</span>"},"Type checking":{"code":"is_atom/<span class=\"hljs-number\">1</span>\nis_bitstring/<span class=\"hljs-number\">1</span>\nis_boolean/<span class=\"hljs-number\">1</span>\nis_function/<span class=\"hljs-number\">1</span>\nis_function/<span class=\"hljs-number\">2</span>\nis_integer/<span class=\"hljs-number\">1</span>\nis_float/<span class=\"hljs-number\">1</span>\n\nis_binary/<span class=\"hljs-number\">1</span>\nis_list/<span class=\"hljs-number\">1</span>\nis_map/<span class=\"hljs-number\">1</span>\nis_tuple/<span class=\"hljs-number\">1</span>\n\nis_nil/<span class=\"hljs-number\">1</span>\nis_number/<span class=\"hljs-number\">1</span>\nis_pid/<span class=\"hljs-number\">1</span>\nis_port/<span class=\"hljs-number\">1</span>\nis_reference/<span class=\"hljs-number\">1</span>"}},"Conditionals":{"If-then-else":{"code":"if a == b <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-ellipsis\"></span>\nelse\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">end</span>","text":"<p>There&#39;s no <code>else if</code>. Use Conditions (<code>cond do</code>).</p>\n"},"Conditions":{"code":"<span class=\"hljs-keyword\">cond</span> <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">5</span> -&gt;\n    <span class=\"hljs-string\">\"not true\"</span>\n  <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">3</span> -&gt;\n    <span class=\"hljs-string\">\"also not true\"</span>\n  <span class=\"hljs-keyword\">true</span> -&gt;\n    <span class=\"hljs-string\">\"default value\"</span>\n<span class=\"hljs-keyword\">end</span>","text":"<p>This is the equivalent of <code>else if</code> clauses.</p>\n"},"Single-line syntax":{"code":"if <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2</span>\nif <span class=\"hljs-keyword\">true</span>, <span class=\"hljs-symbol\">do:</span> <span class=\"hljs-symbol\">:this</span>, <span class=\"hljs-symbol\">else:</span> <span class=\"hljs-symbol\">:that</span>"},"Equality":{"code":"<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2</span>     <span class=\"hljs-result\">true</span>\n<span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">2.0</span>   <span class=\"hljs-result\">true</span>\n<span class=\"hljs-number\">2</span> === <span class=\"hljs-number\">2.0</span>  <span class=\"hljs-result\">false</span>","text":"<p><code>===</code> is stricter when comparing integers and floats.</p>\n"},"Switch-case":{"code":"<span class=\"hljs-keyword\">case</span> day <span class=\"hljs-keyword\">do</span>\n  <span class=\"hljs-symbol\">:Monday</span> -&gt;\n    work()\n  <span class=\"hljs-symbol\">:Tuesday</span> -&gt;\n    train()\n  <span class=\"hljs-constant\">_ </span>-&gt;  <span class=\"hljs-comment\"># matches any value</span>\n    sleep()\n<span class=\"hljs-keyword\">end</span>","text":"<p>Uses pattern-matching.</p>\n"},"And-or":{"code":"if a <span class=\"hljs-keyword\">and</span> b <span class=\"hljs-keyword\">do</span>\nif c <span class=\"hljs-keyword\">or</span> d <span class=\"hljs-keyword\">do</span>\n!e"}},"Numbers":{"Operations":{"code":"<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">11</span> / <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">5.5</span>\ndiv(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">5</span>\nrem(<span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">1</span>"}},"Strings":{"Literals":{"code":"<span class=\"hljs-string\">\"hola\"</span>  <span class=\"hljs-result\">&lt;&lt;?h, ?o, ?l, ?a&gt;&gt;</span>\n<span class=\"hljs-string\">'hola'</span>  <span class=\"hljs-result\">[?h, ?o, ?l, ?a]</span>","text":"<p>Double-quotes are for bitstrings (binary), single-quotes are for char lists.</p>\n"},"Symbols":{"code":"<span class=\"hljs-symbol\">:hello</span>","text":"<p>They are called Atoms.</p>\n"},"Concatenation":{"code":"<span class=\"hljs-string\">\"Hello, \"</span> ++ name"}},"Dictionaries":{"Type":{"code":"map"},"Literals":{"code":"colors = %{\n  <span class=\"hljs-symbol\">:apple</span> =&gt; <span class=\"hljs-string\">\"red\"</span>,\n  <span class=\"hljs-symbol\">:grape</span> =&gt; <span class=\"hljs-string\">\"purple\"</span>\n}"},"Access":{"code":"colors.apple"}},"Exceptions":{"Try/catch":{"code":"try <span class=\"hljs-keyword\">do</span>\n  throw(<span class=\"hljs-symbol\">:hello</span>)\n} catch (e) {\n  puts <span class=\"hljs-string\">\"Caught error: <span class=\"hljs-subst\">#{e.message}</span>\"</span>\n}"}},"Modules":{"Importing":{"code":"import <span class=\"hljs-constant\">Ecto</span>"}},"System":{"Environment variables":{"code":"<span class=\"hljs-constant\">System.</span>get_env(<span class=\"hljs-string\">\"DATABASE_URL\"</span>)\n<span class=\"hljs-constant\">System.</span>put_env(<span class=\"hljs-string\">\"DATABASE_URL\"</span>, <span class=\"hljs-string\">\"url\"</span>)"},"Arguments parsing":{"code":"<span class=\"hljs-constant\">System.</span>argv"}}},"javascript-legacy":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">hi, name</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(hi + <span class=\"hljs-string\">', '</span> + name);\n}"},"Invoking":{"code":"greet(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'John'</span>);"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">square</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> n * n;\n}"},"Anonymous functions":{"code":"<span class=\"hljs-keyword\">var</span> addOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{ <span class=\"hljs-keyword\">return</span> n + <span class=\"hljs-number\">1</span>; }\naddOne(<span class=\"hljs-number\">20</span>);"},"Splat":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span> (<span class=\"hljs-params\">hi</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> names = [].slice.call(<span class=\"hljs-built_in\">arguments</span>, <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-result\">names == ['Moe', 'Curly']</span>\n}\n\ngreet(<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-string\">'Curly'</span>);"}},"Variables":{"Local variables":{"code":"<span class=\"hljs-keyword\">var</span> myvar = <span class=\"hljs-number\">1</span>;"},"Global variables":{"code":"<span class=\"hljs-built_in\">window</span>.gvar = <span class=\"hljs-number\">1</span>;","text":"<p>The global context is in <code>window</code> (browser) or <code>global</code> (Node.js).</p>\n"},"Assignment":{"code":"myvar = <span class=\"hljs-number\">1</span>;","text":"<p>This assumes <code>myvar</code> was declared using <code>var</code>.</p>\n"}},"Classes":{"Defining classes":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Shape</span>(<span class=\"hljs-params\"></span>) </span>{\n}\n\nShape.prototype.area = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.width * <span class=\"hljs-keyword\">this</span>.height;\n};","text":"<p>JavaScript doesn&#39;t have classes, it has prototypes.</p>\n"},"Basic instanciation":{"code":"instance = <span class=\"hljs-keyword\">new</span> Shape();"},"Constructors":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Shape</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Attributes":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Shape</span>(<span class=\"hljs-params\"></span>) </span>{\n}\n\nShape.prototype.setDimensions =\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">width, height</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.width = width;\n    <span class=\"hljs-keyword\">this</span>.height = height;\n  };"},"Setter/Getter":{"code":"<span class=\"hljs-built_in\">Object</span>.defineProperty(Shape.prototype, <span class=\"hljs-string\">'hidden'</span>, {\n  get: circumference () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.radius * <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>;\n  },\n  set: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">value</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.radius = value / (MATH.PI * <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.radius\n  }\n});","text":"<p>Supported in IE9+.</p>\n"},"Inheritance":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Rectangle</span>(<span class=\"hljs-params\"></span>) </span>{\n  Shape.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n  <span class=\"hljs-ellipsis\"></span>\n}\n\nRectangle.prototype =\n  <span class=\"hljs-built_in\">Object</span>.create(Shape.prototype);\nRectangle.prototype.constructor = Shape;","text":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\">Object.create</a> is not supported on IE8.</p>\n"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> ClassName)"}},"Methods":{"Defining":{"code":"MyClass.prototype.method = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Class methods":{"code":"MyClass.method = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}\n\nMyClass.method();"},"Running a method with an arbitrary name":{"code":"obj[<span class=\"hljs-string\">'method_name'</span>](arg1, arg2);"}},"Namespaces":{"Singleton pattern":{"code":"<span class=\"hljs-keyword\">var</span> AppConfig = {\n  read: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-ellipsis\"></span>\n  }\n};\n\nAppConfig.read();"}},"Arrays":{"Initializing":{"code":"list = [];\nlist = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>];"},"Assigning":{"code":"list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'a'</span>;"},"Accessing":{"code":"list[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-result\">'a'</span>"},"Length":{"code":"list.length"},"Adding items":{"code":"list.unshift(X);       <span class=\"hljs-result\">[X _ _ _ _]</span>\nlist.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, X);  <span class=\"hljs-result\">[_ _ X _ _]</span>\nlist.push(X);          <span class=\"hljs-result\">[_ _ _ _ X]</span>"},"Removing items":{"code":"<span class=\"hljs-comment -mini\">First:</span>\nlist.shift()      <span class=\"hljs-result\"> a</span>\nlist              <span class=\"hljs-result\">[  b c d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Middle:</span>\nlist.splice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[    c    ]</span>\nlist              <span class=\"hljs-result\">[a b   d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Last:</span>\nlist.pop()        <span class=\"hljs-result\">         e</span>\nlist              <span class=\"hljs-result\">[a b c d  ]</span>"},"Removing ranges":{"code":"list.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">[    c d  ]</span>\nlist               <span class=\"hljs-result\">[a b     e]</span>"},"Subsets":{"code":"list.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[a        ]</span>\nlist.slice(<span class=\"hljs-number\">1</span>)     <span class=\"hljs-result\">[  b c d e]</span>\nlist.slice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[    c    ]</span>"},"Finding index":{"code":"list = [ a, b, c, d, a ];\nlist.indexOf(a)      <span class=\"hljs-result\">0</span>\nlist.lastIndexOf(a)  <span class=\"hljs-result\">4 (IE9+)</span>"},"Checking for presence":{"code":"<span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].indexOf(<span class=\"hljs-number\">2</span>) &gt; -<span class=\"hljs-number\">1</span>)"},"Filtering":{"code":"users.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> user.age &gt; <span class=\"hljs-number\">18</span>;\n}) <span class=\"hljs-comment -mini\">IE9+</span>"},"Iteration":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; list.length; ++i) {\n  <span class=\"hljs-keyword\">var</span> item = list[i];\n  <span class=\"hljs-built_in\">console</span>.log(item);\n}"}},"Types":{"Primitives":{"code":"<span class=\"hljs-number\">23</span>                    <span class=\"hljs-comment\">// Number</span>\n<span class=\"hljs-number\">23.0</span>                  <span class=\"hljs-comment\">// Number</span>\n[ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>           <span class=\"hljs-comment\">// Boolean</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// Date</span>\n<span class=\"hljs-string\">'hello'</span>               <span class=\"hljs-comment\">// String</span>\n{name: <span class=\"hljs-string\">'John'</span>}        <span class=\"hljs-comment\">// Object</span>\n/^abc/                <span class=\"hljs-comment\">// RegExp</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}        <span class=\"hljs-comment\">// Function</span>"},"Booleans":{"code":"<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-literal\">false</span>"},"Null":{"code":"<span class=\"hljs-literal\">null</span> <span class=\"hljs-comment -mini\">(a non-value)</span>\n<span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment -mini\">(a value is not present)</span>"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">'string'</span>)\n<span class=\"hljs-comment -mini\">also: object, function, undefined</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(obj))"},"Casting":{"code":"<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'10'</span>)\n<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">'3.14'</span>)\n<span class=\"hljs-built_in\">String</span>(obj)\n<span class=\"hljs-built_in\">Number</span>(obj)"},"Ternary":{"code":"name == <span class=\"hljs-string\">'john'</span> ? <span class=\"hljs-string\">'yes'</span> : <span class=\"hljs-string\">'no'</span>"}},"Conditionals":{"If-then-else":{"code":"<span class=\"hljs-keyword\">if</span> (a === b) {\n  <span class=\"hljs-ellipsis\"></span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (b !== c) {\n  <span class=\"hljs-ellipsis\"></span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Equality":{"code":"<span class=\"hljs-string\">'2'</span> == <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">true</span>\n<span class=\"hljs-string\">'2'</span> === <span class=\"hljs-number\">2</span>  <span class=\"hljs-result\">false</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-string\">'2'</span> != <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">false</span>\n<span class=\"hljs-string\">'2'</span> !== <span class=\"hljs-number\">2</span>  <span class=\"hljs-result\">true</span>"},"Switch-case":{"code":"<span class=\"hljs-keyword\">switch</span> (day) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Monday'</span>:\n    work();\n    <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Tuesday'</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Wednesday'</span>:\n    train();\n    <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">default</span>:\n    sleep();\n}"},"And-or":{"code":"<span class=\"hljs-keyword\">if</span> (a &amp;&amp; b)\n<span class=\"hljs-keyword\">if</span> (c || d)\n!e"},"Ternary":{"code":"name == <span class=\"hljs-string\">'john'</span> ? <span class=\"hljs-string\">'yes'</span> : <span class=\"hljs-string\">'no'</span>"}},"Numbers":{"Operations":{"code":"<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">11</span> / <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">5.5</span>\n<span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">1</span>"},"Rounding off":{"code":"<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-number\">2.5</span>)       <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">2.5</span>)     <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">2.5</span>)      <span class=\"hljs-result\">3</span>\n<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">2.5</span>)     <span class=\"hljs-result\">3</span>\n(<span class=\"hljs-number\">3.141</span>).toFixed(<span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">3.14</span>"},"Minimum and maximum":{"code":"<span class=\"hljs-built_in\">Math</span>.min(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)   <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)   <span class=\"hljs-result\">4</span>"},"Exponents":{"code":"<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>)   <span class=\"hljs-result\">256</span>"},"Trigonometry":{"code":"<span class=\"hljs-built_in\">Math</span>.sin(theta)\n<span class=\"hljs-built_in\">Math</span>.PI"}},"Strings":{"Literals":{"code":"<span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-string\">'world'</span>"},"Concatenation":{"code":"<span class=\"hljs-string\">'Hello, '</span> + name"},"Formatting":{"code":"<span class=\"hljs-keyword\">var</span> format = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'util'</span>).format;\nformat(<span class=\"hljs-string\">'Hello, %s from %s'</span>, name, city);","text":"<p><a href=\"http://nodejs.org/api/util.html#util_util_format_format\">format</a> is only available on Node.js.</p>\n"},"Length":{"code":"<span class=\"hljs-string\">'Hello'</span>.length"},"Substring":{"code":"<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">'Hi'</span>\n<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">3</span>)     <span class=\"hljs-result\">'world'</span>\n<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">'wo'</span>"},"Search":{"code":"<span class=\"hljs-string\">'Hi'</span>.indexOf(<span class=\"hljs-string\">'i'</span>)  <span class=\"hljs-result\">4</span>\n<span class=\"hljs-string\">'Hi'</span>.indexOf(<span class=\"hljs-string\">'x'</span>)  <span class=\"hljs-result\">-1</span>"},"Case":{"code":"<span class=\"hljs-string\">'Hello'</span>.toUpperCase()\n<span class=\"hljs-string\">'Hello'</span>.toLowerCase()"},"Replace":{"code":"<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-string\">'i'</span>, <span class=\"hljs-string\">'ello'</span>)   <span class=\"hljs-comment -mini\">(string)</span>\n<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-regexp\">/i/</span>, <span class=\"hljs-string\">'ello'</span>)   <span class=\"hljs-comment -mini\">(regex)</span>\n<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-regexp\">/i/g</span>, <span class=\"hljs-string\">'ello'</span>)  <span class=\"hljs-comment -mini\">(replace all)</span>"},"Advanced replace":{"code":"str.replace(<span class=\"hljs-regexp\">/age: (\\d+)/g</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">_, n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'edad: '</span> + n;\n})\n<span class=\"hljs-comment -mini\">Changes <code>&#39;age: 12&#39;</code> to <code>&#39;edad: 12&#39;</code></span>"}},"Dictionaries":{"Type":{"code":"<span class=\"hljs-built_in\">Object</span>"},"Literals":{"code":"colors = {\n  apple: <span class=\"hljs-string\">'red'</span>,\n  grape: <span class=\"hljs-string\">'purple'</span>\n};"},"Access":{"code":"colors[<span class=\"hljs-string\">'apple'</span>]\ncolors.apple"},"Setting":{"code":"colors[<span class=\"hljs-string\">'banana'</span>] = <span class=\"hljs-string\">'yellow'</span>;\ncolors.banana = <span class=\"hljs-string\">'yellow'</span>;"},"List keys":{"code":"<span class=\"hljs-built_in\">Object</span>.keys(colors)"},"Iterating":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> colors) {\n  <span class=\"hljs-keyword\">if</span> (colors.hasOwnProperty(key)) {\n    <span class=\"hljs-keyword\">var</span> val = colors[key];\n    <span class=\"hljs-ellipsis\"></span>\n  }\n}","text":"<p>Be sure to always check\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">hasOwnProperty</a>.</p>\n"}},"Modules":{"Importing":{"code":"<span class=\"hljs-keyword\">var</span> Express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);"},"Importing a symbol":{"code":"<span class=\"hljs-keyword\">var</span> Router = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>).Router;"},"Importing a symbol as an alias":{"code":"<span class=\"hljs-keyword\">var</span> ExRouter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>).Router;"},"Exporting":{"code":"<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-ellipsis\"></span> };"},"Exporting symbols":{"code":"exports.item = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-ellipsis\"></span> };"}},"String representation":{"Getting":{"code":"obj.toString()\n<span class=\"hljs-string\">''</span> + obj\n<span class=\"hljs-built_in\">String</span>(obj)"}},"Exceptions":{"Try/catch":{"code":"<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'hello'</span>);\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Caught error: '</span> + e.message);\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"I'm after the clause\"</span>);\n}"}},"Iterables":{"Iterating":{"code":"list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{<a class=\"hljs-doclink\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"></a>\n  <span class=\"hljs-ellipsis\"></span>\n});\n<span class=\"hljs-hr\"></span>list.every(<span class=\"hljs-ellipsis\"></span>);\nlist.some(<span class=\"hljs-ellipsis\"></span>);"},"Foreach loops":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = list.length; i &lt; len; i++) {\n  <span class=\"hljs-keyword\">var</span> item = list[i];\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Map":{"code":"list.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> use(item);\n});"},"Reduce":{"code":"list.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result, item</span>) </span>{\n  result += item;\n  <span class=\"hljs-keyword\">return</span> result;\n});"}},"Printing":{"Printing":{"code":"<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello'</span>);\nprocess.stdout.write(<span class=\"hljs-string\">'hello\\n'</span>); <span class=\"hljs-comment -mini\">Node.js</span>"},"Error output":{"code":"<span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'oh no'</span>);\nprocess.stderr.write(<span class=\"hljs-string\">'oh no\\n'</span>); <span class=\"hljs-comment -mini\">Node.js</span>"}},"File API":{"Require":{"code":"<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);"},"Reading":{"code":"d = fs.readFileSync(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>);\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Asynchronous:</span>\nfs.readFile(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{ <span class=\"hljs-ellipsis\"></span> });"},"Writing":{"code":"fs.writeFileSync(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, data);\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Asynchronous:</span>\nfs.writeFile(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, data,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{ <span class=\"hljs-ellipsis\"></span> });"}},"System":{"Environment variables":{"code":"process.env.DATABASE_URL"},"Arguments parsing":{"code":"process.argv.split(<span class=\"hljs-number\">2</span>)"}}},"javascript":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">hi, name</span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(hi + <span class=\"hljs-string\">', '</span> + name);\n}"},"Invoking":{"code":"greet(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'John'</span>);"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">square</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> n * n;\n}"},"Anonymous functions":{"code":"<span class=\"hljs-keyword\">var</span> addOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>) </span>{ <span class=\"hljs-keyword\">return</span> n + <span class=\"hljs-number\">1</span>; }\naddOne(<span class=\"hljs-number\">20</span>);"},"Splat":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span> (<span class=\"hljs-params\">hi, ...names</span>) </span>{\n  <span class=\"hljs-result\">names == ['Moe', 'Curly']</span>\n}\n\ngreet(<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-string\">'Curly'</span>);"}},"Variables":{"Local variables":{"code":"<span class=\"hljs-keyword\">var</span> myvar = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-hr\"></span><span class=\"hljs-keyword\">let</span> myvar = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">const</span> myvar = <span class=\"hljs-number\">1</span>;","text":"<p>See: <a href=\"http://babeljs.io/docs/learn-es2015/#let-const\">Block scoping</a>.</p>\n"},"Global variables":{"code":"<span class=\"hljs-built_in\">window</span>.gvar = <span class=\"hljs-number\">1</span>;","text":"<p>The global context is in <code>window</code> (browser) or <code>global</code> (Node.js).</p>\n"},"Assignment":{"code":"myvar = <span class=\"hljs-number\">1</span>;","text":"<p>This assumes <code>myvar</code> was declared using <code>var</code>.</p>\n"}},"Destructuring":{"Assignments":{"code":"<span class=\"hljs-keyword\">let</span> [first, last] = [<span class=\"hljs-string\">'Nikola'</span>, <span class=\"hljs-string\">'Tesla'</span>];\n<span class=\"hljs-keyword\">let</span> {title, artist} = { title: <span class=\"hljs-string\">'Help'</span>, artist: <span class=\"hljs-string\">'Beatles'</span> };"},"Spreading":{"code":"<span class=\"hljs-keyword\">let</span> [ first, ...rest, last ] = list;"},"Loops":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> {title, artist} <span class=\"hljs-keyword\">in</span> songs) {\n}"},"Functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">greet</span>(<span class=\"hljs-params\">{ name, greeting }</span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}\n\ngreet({ name: <span class=\"hljs-string\">'Larry'</span>, greeting: <span class=\"hljs-string\">'Ahoy'</span> });"}},"Classes":{"Defining classes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span>{\n  area () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.width * <span class=\"hljs-keyword\">this</span>.height;\n  }\n}"},"Basic instanciation":{"code":"instance = <span class=\"hljs-keyword\">new</span> Shape();"},"Constructors":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span>{\n  constructor () {\n    <span class=\"hljs-ellipsis\"></span>\n  }\n}"},"Attributes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span>{\n  setDimensions (width, height) {\n    <span class=\"hljs-keyword\">this</span>.width = width;\n    <span class=\"hljs-keyword\">this</span>.height = height;\n  }\n}"},"Setter/Getter":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span> </span>{\n  get circumference () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.radius * <span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>;\n  }\n\n  set circumference (value) {\n    <span class=\"hljs-keyword\">this</span>.radius = value / (<span class=\"hljs-built_in\">Math</span>.PI * <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.radius\n  }\n}"},"Inheritance":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rectangle</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Shape</span> </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> (obj <span class=\"hljs-keyword\">instanceof</span> ClassName)"}},"Methods":{"Defining":{"code":"MyClass.prototype.method = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Class methods":{"code":"MyClass.method = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-ellipsis\"></span>\n}\n\nMyClass.method();"},"Running a method with an arbitrary name":{"code":"obj[<span class=\"hljs-string\">'method_name'</span>](arg1, arg2);"}},"Namespaces":{"Singleton pattern":{"code":"<span class=\"hljs-keyword\">var</span> AppConfig = {\n  read: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-ellipsis\"></span>\n  }\n};\n\nAppConfig.read();"}},"Arrays":{"Initializing":{"code":"list = [];\nlist = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>];"},"Assigning":{"code":"list[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'a'</span>;"},"Accessing":{"code":"list[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-result\">'a'</span>"},"Length":{"code":"list.length"},"Adding items":{"code":"list.unshift(X);       <span class=\"hljs-result\">[X _ _ _ _]</span>\nlist.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, X);  <span class=\"hljs-result\">[_ _ X _ _]</span>\nlist.push(X);          <span class=\"hljs-result\">[_ _ _ _ X]</span>"},"Removing items":{"code":"<span class=\"hljs-comment -mini\">First:</span>\nlist.shift()      <span class=\"hljs-result\"> a</span>\nlist              <span class=\"hljs-result\">[  b c d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Middle:</span>\nlist.splice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[    c    ]</span>\nlist              <span class=\"hljs-result\">[a b   d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Last:</span>\nlist.pop()        <span class=\"hljs-result\">         e</span>\nlist              <span class=\"hljs-result\">[a b c d  ]</span>"},"Removing ranges":{"code":"list.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">[    c d  ]</span>\nlist               <span class=\"hljs-result\">[a b     e]</span>"},"Subsets":{"code":"list.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[a        ]</span>\nlist.slice(<span class=\"hljs-number\">1</span>)     <span class=\"hljs-result\">[  b c d e]</span>\nlist.slice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-result\">[    c    ]</span>"},"Finding index":{"code":"list = [ a, b, c, d, a ];\nlist.indexOf(a)      <span class=\"hljs-result\">0</span>\nlist.lastIndexOf(a)  <span class=\"hljs-result\">4 (IE9+)</span>"},"Checking for presence":{"code":"<span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].indexOf(<span class=\"hljs-number\">2</span>) &gt; -<span class=\"hljs-number\">1</span>)"},"Filtering":{"code":"users.filter((user) =&gt; user.age &gt; <span class=\"hljs-number\">18</span>) <span class=\"hljs-comment -mini\">IE9+</span>"},"Iteration":{"code":"list.forEach((item) =&gt; {\n  <span class=\"hljs-built_in\">console</span>.log(item);\n});"}},"Types":{"Primitives":{"code":"<span class=\"hljs-number\">23</span>                    <span class=\"hljs-comment\">// Number</span>\n<span class=\"hljs-number\">23.0</span>                  <span class=\"hljs-comment\">// Number</span>\n[ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]            <span class=\"hljs-comment\">// Array</span>\n<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>           <span class=\"hljs-comment\">// Boolean</span>\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-number\">2015</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\">// Date</span>\n<span class=\"hljs-string\">'hello'</span>               <span class=\"hljs-comment\">// String</span>\n{name: <span class=\"hljs-string\">'John'</span>}        <span class=\"hljs-comment\">// Object</span>\n/^abc/                <span class=\"hljs-comment\">// RegExp</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}        <span class=\"hljs-comment\">// Function</span>"},"Booleans":{"code":"<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-literal\">false</span>"},"Null":{"code":"<span class=\"hljs-literal\">null</span> <span class=\"hljs-comment -mini\">(a non-value)</span>\n<span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment -mini\">(a value is not present)</span>"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> obj === <span class=\"hljs-string\">'string'</span>)\n<span class=\"hljs-comment -mini\">also: object, function, undefined</span>\n\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Array</span>.isArray(obj))"},"Casting":{"code":"<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-string\">'10'</span>)\n<span class=\"hljs-built_in\">parseFloat</span>(<span class=\"hljs-string\">'3.14'</span>)\n<span class=\"hljs-built_in\">String</span>(obj)\n<span class=\"hljs-built_in\">Number</span>(obj)"}},"Conditionals":{"If-then-else":{"code":"<span class=\"hljs-keyword\">if</span> (a === b) {\n  <span class=\"hljs-ellipsis\"></span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (b !== c) {\n  <span class=\"hljs-ellipsis\"></span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Equality":{"code":"<span class=\"hljs-string\">'2'</span> == <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">true</span>\n<span class=\"hljs-string\">'2'</span> === <span class=\"hljs-number\">2</span>  <span class=\"hljs-result\">false</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-string\">'2'</span> != <span class=\"hljs-number\">2</span>   <span class=\"hljs-result\">false</span>\n<span class=\"hljs-string\">'2'</span> !== <span class=\"hljs-number\">2</span>  <span class=\"hljs-result\">true</span>"},"Switch-case":{"code":"<span class=\"hljs-keyword\">switch</span> (day) {\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Monday'</span>:\n    work();\n    <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Tuesday'</span>:\n  <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'Wednesday'</span>:\n    train();\n    <span class=\"hljs-keyword\">break</span>;\n\n  <span class=\"hljs-keyword\">default</span>:\n    sleep();\n}"},"And-or":{"code":"<span class=\"hljs-keyword\">if</span> (a &amp;&amp; b)\n<span class=\"hljs-keyword\">if</span> (c || d)\n!e"},"Ternary":{"code":"name == <span class=\"hljs-string\">'john'</span> ? <span class=\"hljs-string\">'yes'</span> : <span class=\"hljs-string\">'no'</span>"}},"Numbers":{"Operations":{"code":"<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">11</span> / <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">5.5</span>\n<span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">1</span>"},"Rounding off":{"code":"<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-number\">2.5</span>)       <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-number\">2.5</span>)     <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.ceil(<span class=\"hljs-number\">2.5</span>)      <span class=\"hljs-result\">3</span>\n<span class=\"hljs-built_in\">Math</span>.round(<span class=\"hljs-number\">2.5</span>)     <span class=\"hljs-result\">3</span>\n(<span class=\"hljs-number\">3.141</span>).toFixed(<span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">3.14</span>"},"Minimum and maximum":{"code":"<span class=\"hljs-built_in\">Math</span>.min(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)   <span class=\"hljs-result\">2</span>\n<span class=\"hljs-built_in\">Math</span>.max(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>)   <span class=\"hljs-result\">4</span>"},"Exponents":{"code":"<span class=\"hljs-built_in\">Math</span>.pow(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">8</span>)   <span class=\"hljs-result\">256</span>"},"Trigonometry":{"code":"<span class=\"hljs-built_in\">Math</span>.sin(theta)\n<span class=\"hljs-built_in\">Math</span>.PI"}},"Strings":{"Literals":{"code":"<span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-string\">'world'</span>\n<span class=\"hljs-string\">`mundo`</span>"},"Interpolation":{"code":"<span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">${name}</span>`</span>"},"Concatenation":{"code":"<span class=\"hljs-string\">'Hello, '</span> + name"},"Formatting":{"code":"<span class=\"hljs-keyword\">var</span> format = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'util'</span>).format;\nformat(<span class=\"hljs-string\">'Hello, %s from %s'</span>, name, city);","text":"<p><a href=\"http://nodejs.org/api/util.html#util_util_format_format\">format</a> is only available on Node.js.</p>\n"},"Length":{"code":"<span class=\"hljs-string\">'Hello'</span>.length"},"Substring":{"code":"<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">'Hi'</span>\n<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">3</span>)     <span class=\"hljs-result\">'world'</span>\n<span class=\"hljs-string\">'Hi world'</span>.substr(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>)  <span class=\"hljs-result\">'wo'</span>"},"Search":{"code":"<span class=\"hljs-string\">'Hi'</span>.indexOf(<span class=\"hljs-string\">'i'</span>)  <span class=\"hljs-result\">4</span>\n<span class=\"hljs-string\">'Hi'</span>.indexOf(<span class=\"hljs-string\">'x'</span>)  <span class=\"hljs-result\">-1</span>"},"Case":{"code":"<span class=\"hljs-string\">'Hello'</span>.toUpperCase()\n<span class=\"hljs-string\">'Hello'</span>.toLowerCase()"},"Replace":{"code":"<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-string\">'i'</span>, <span class=\"hljs-string\">'ello'</span>)   <span class=\"hljs-comment -mini\">(string)</span>\n<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-regexp\">/i/</span>, <span class=\"hljs-string\">'ello'</span>)   <span class=\"hljs-comment -mini\">(regex)</span>\n<span class=\"hljs-string\">'Hi'</span>.replace(<span class=\"hljs-regexp\">/i/g</span>, <span class=\"hljs-string\">'ello'</span>)  <span class=\"hljs-comment -mini\">(replace all)</span>"},"Advanced replace":{"code":"str.replace(<span class=\"hljs-regexp\">/age: (\\d+)/g</span>, (_, n) =&gt; <span class=\"hljs-string\">`edad: <span class=\"hljs-subst\">${n}</span>`</span>)\n<span class=\"hljs-comment -mini\">Changes <code>&#39;age: 12&#39;</code> to <code>&#39;edad: 12&#39;</code></span>"}},"Dictionaries":{"Type":{"code":"<span class=\"hljs-built_in\">Object</span>"},"Literals":{"code":"colors = {\n  apple: <span class=\"hljs-string\">'red'</span>,\n  grape: <span class=\"hljs-string\">'purple'</span>\n};"},"Access":{"code":"colors[<span class=\"hljs-string\">'apple'</span>]\ncolors.apple"},"Setting":{"code":"colors[<span class=\"hljs-string\">'banana'</span>] = <span class=\"hljs-string\">'yellow'</span>;\ncolors.banana = <span class=\"hljs-string\">'yellow'</span>;"},"List keys":{"code":"<span class=\"hljs-built_in\">Object</span>.keys(colors)"},"Shorthand":{"code":"exports = { read, write };\n<span class=\"hljs-comment -mini\">Same as <code>{ read: read, write: write }</code></span>"},"Computed property names":{"code":"result = {\n  [ <span class=\"hljs-string\">'prop_'</span> + n ]: <span class=\"hljs-number\">42</span>\n}"},"Functions":{"code":"obj = {\n  hide () {\n    <span class=\"hljs-keyword\">this</span>.hidden = <span class=\"hljs-literal\">true</span>;\n  }\n};\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\"><code>hide() { ... }</code> is the same as <code>hide: function () { ... }</code>.</span>"},"Setters and getters":{"code":"obj = {\n  get hidden () {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.visibliity === <span class=\"hljs-string\">'hidden'</span>;\n  }\n  set hidden (val) {\n    <span class=\"hljs-keyword\">this</span>.visibility = val ? <span class=\"hljs-string\">'hidden'</span> : <span class=\"hljs-string\">'visible'</span>;\n  }\n}"},"Iterating":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> colors) {\n  <span class=\"hljs-keyword\">if</span> (colors.hasOwnProperty(key)) {\n    <span class=\"hljs-keyword\">var</span> val = colors[key];\n    <span class=\"hljs-ellipsis\"></span>\n  }\n}","text":"<p>Be sure to always check\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">hasOwnProperty</a>.</p>\n"}},"Modules":{"Importing":{"code":"<span class=\"hljs-keyword\">import</span> Express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;"},"Importing a symbol":{"code":"<span class=\"hljs-keyword\">import</span> { Router } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;"},"Importing a symbol as an alias":{"code":"<span class=\"hljs-keyword\">import</span> { Router <span class=\"hljs-keyword\">as</span> ExRouter } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'express'</span>;"},"Exporting":{"code":"<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-ellipsis\"></span> };"},"Exporting symbols":{"code":"<span class=\"hljs-keyword\">export</span> item = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-ellipsis\"></span> };"}},"String representation":{"Getting":{"code":"obj.toString()\n<span class=\"hljs-string\">''</span> + obj\n<span class=\"hljs-built_in\">String</span>(obj)"}},"Exceptions":{"Try/catch":{"code":"<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'hello'</span>);\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Caught error: '</span> + e.message);\n} <span class=\"hljs-keyword\">finally</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"I'm after the clause\"</span>);\n}"}},"Iterables":{"Iterating":{"code":"list.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{<a class=\"hljs-doclink\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\"></a>\n  <span class=\"hljs-ellipsis\"></span>\n});\n<span class=\"hljs-hr\"></span>list.every(<span class=\"hljs-ellipsis\"></span>);\nlist.some(<span class=\"hljs-ellipsis\"></span>);"},"Foreach loops":{"code":"<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, len = list.length; i &lt; len; i++) {\n  <span class=\"hljs-keyword\">var</span> item = list[i];\n  <span class=\"hljs-ellipsis\"></span>\n}"},"Map":{"code":"list.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> use(item);\n});"},"Reduce":{"code":"list.reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">result, item</span>) </span>{\n  result += item;\n  <span class=\"hljs-keyword\">return</span> result;\n});"}},"Printing":{"Printing":{"code":"<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'hello'</span>);\nprocess.stdout.write(<span class=\"hljs-string\">'hello\\n'</span>); <span class=\"hljs-comment -mini\">Node.js</span>"},"Error output":{"code":"<span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'oh no'</span>);\nprocess.stderr.write(<span class=\"hljs-string\">'oh no\\n'</span>); <span class=\"hljs-comment -mini\">Node.js</span>"}},"File API":{"Require":{"code":"<span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);"},"Reading":{"code":"d = fs.readFileSync(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>);\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Asynchronous:</span>\nfs.readFile(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{ <span class=\"hljs-ellipsis\"></span> });"},"Writing":{"code":"fs.writeFileSync(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, data);\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Asynchronous:</span>\nfs.writeFile(<span class=\"hljs-string\">'file.txt'</span>, <span class=\"hljs-string\">'utf-8'</span>, data,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{ <span class=\"hljs-ellipsis\"></span> });"}},"System":{"Environment variables":{"code":"process.env.DATABASE_URL"},"Arguments parsing":{"code":"process.argv.split(<span class=\"hljs-number\">2</span>)"}}},"python":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(hi, name)</span>:</span>\n  <span class=\"hljs-keyword\">print</span> <span class=\"hljs-string\">'%s, %s'</span> % ( hi, name )"},"Invoking":{"code":"greet(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'John'</span>)"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span><span class=\"hljs-params\">(n)</span>:</span>\n  <span class=\"hljs-keyword\">return</span> n * n"},"Anonymous functions":{"code":"add_one = <span class=\"hljs-keyword\">lambda</span> n: n + <span class=\"hljs-number\">1</span>\nadd_one(<span class=\"hljs-number\">20</span>)"},"Default values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(name = <span class=\"hljs-string\">'Larry'</span>)</span>:</span>"},"Splat":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(hi, *names)</span>:</span>\n  <span class=\"hljs-result\">names == ['Moe', 'Curly']</span>\n  <span class=\"hljs-ellipsis\"></span>\n\ngreet(<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-string\">'Curly'</span>)"},"Keyword arguments":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(**kwargs)</span>:</span>\n  <span class=\"hljs-ellipsis\"></span>\n\ngreet(name=<span class=\"hljs-string\">'Moe'</span>, time=<span class=\"hljs-string\">'now'</span>)"}},"Variables":{"Local variables":{"code":"myvar = <span class=\"hljs-number\">1</span>"}},"Classes":{"Defining classes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_area</span><span class=\"hljs-params\">(self)</span>:</span>\n    <span class=\"hljs-keyword\">return</span> width * height"},"Basic instanciation":{"code":"instance = Shape.new"},"Constructors":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n    <span class=\"hljs-ellipsis\"></span>"},"Attributes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_dimensions</span><span class=\"hljs-params\">(self, width, height)</span>:</span>\n    self.width = width\n    self.height = height"},"Inheritance":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rectangle</span><span class=\"hljs-params\">(Shape)</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span>\n    super\n    <span class=\"hljs-comment\"># other stuff here</span>"}},"Methods":{"Defining":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span>:</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(self)</span>:</span>\n    <span class=\"hljs-ellipsis\"></span>","text":"<p><code>self</code> is a reference to the instance.</p>\n"},"Class methods":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span>:</span>\n<span class=\"hljs-decorator\">  @classmethod</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(cls)</span>:</span>\n    <span class=\"hljs-ellipsis\"></span>"},"Running a method with an arbitrary name":{"code":"getattr(obj, <span class=\"hljs-string\">'method_name'</span>)(arg1, arg2)"}},"Arrays":{"Initializing":{"code":"list = []\nlist = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>]","text":"<p>Assume all examples start with this.</p>\n"},"Accessing":{"code":"list[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-result\">'a'</span>"}}},"ruby":{"Functions":{"Defining functions":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(hi, name)</span></span>\n  puts <span class=\"hljs-string\">\"<span class=\"hljs-subst\">#{hi}</span>, <span class=\"hljs-subst\">#{name}</span>\"</span>\n<span class=\"hljs-keyword\">end</span>","text":"<p>When using <code>def</code> outside of a Class or Module, they&#39;re defined a as method for <code>Object</code> and is available everywhere.</p>\n"},"Invoking":{"code":"greet <span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'John'</span>\ngreet(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'John'</span>)"},"Returning values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span><span class=\"hljs-params\">(n)</span></span>\n  <span class=\"hljs-keyword\">return</span> n * n\n<span class=\"hljs-keyword\">end</span>"},"Implicit returns":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span><span class=\"hljs-params\">(n)</span></span>\n  n * n\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">The last statement&#39;s value is always returned.</span>"},"Implicit returns (2)":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">divide</span><span class=\"hljs-params\">(a, b)</span></span>\n  <span class=\"hljs-keyword\">if</span> b == <span class=\"hljs-number\">0</span>\n    raise <span class=\"hljs-constant\">StandardError</span>, <span class=\"hljs-string\">'Divide by 0'</span>\n  <span class=\"hljs-keyword\">else</span>\n    a / b\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Anonymous functions":{"code":"add_one = -&gt; (n) { n + <span class=\"hljs-number\">1</span> }\nadd_one = lambda { |n| n + <span class=\"hljs-number\">1</span> }  <span class=\"hljs-comment -mini\">Ruby 1.8-</span>\n\nadd_one.call(<span class=\"hljs-number\">20</span>)\nadd_one[<span class=\"hljs-number\">20</span>]"},"Default values":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(name = <span class=\"hljs-string\">'Larry'</span>)</span></span>"},"Splat":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(hi, *names)</span></span>\n  <span class=\"hljs-result\">names == ['Moe', 'Curly']</span>\n<span class=\"hljs-keyword\">end</span>\n\ngreet(<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-string\">'Curly'</span>)"},"Keyword arguments":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span><span class=\"hljs-params\">(options = {})</span></span>\n<span class=\"hljs-keyword\">end</span>\n\ngreet <span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">'Moe'</span>, <span class=\"hljs-symbol\">time:</span> <span class=\"hljs-string\">'now'</span>"}},"Variables":{"Local variables":{"code":"myvar = <span class=\"hljs-number\">1</span>"},"Global variables":{"text":"<p>See: <a href=\"http://www.rubyist.net/~slagell/ruby/globalvars.html\">Global variables</a>.</p>\n","code":"<span class=\"hljs-variable\">$gvar</span> = <span class=\"hljs-number\">1</span>"},"Assignment":{"code":"myvar = <span class=\"hljs-number\">1</span>"},"Safe assignment":{"code":"myvar ||= <span class=\"hljs-number\">1</span>"},"Instance variables":{"code":"<span class=\"hljs-variable\">@var</span>"},"Class variables":{"code":"<span class=\"hljs-variable\">@@var</span>"}},"Destructuring":{"Assignments":{"code":"first, last = [<span class=\"hljs-string\">'Nikola'</span>, <span class=\"hljs-string\">'Tesla'</span>]"},"Spreading":{"code":"head, *tail = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\nhead  <span class=\"hljs-result\">1</span>\ntail  <span class=\"hljs-result\">[2, 3, 4]</span>"}},"Classes":{"Defining classes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">area</span></span>\n    width * height\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Basic instanciation":{"code":"instance = <span class=\"hljs-constant\">Shape</span>.new"},"Constructors":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\n    <span class=\"hljs-ellipsis\"></span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Attributes":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span></span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:width</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:height</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_dimensions</span><span class=\"hljs-params\">(width, height)</span></span>\n    <span class=\"hljs-keyword\">self</span>.width = width\n    <span class=\"hljs-keyword\">self</span>.height = height\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">See: <a href=\"http://www.rubyist.net/~slagell/ruby/accessors.html\">Accessors</a>. Also: <code>attr_reader</code> and <code>attr_writer</code>.</span>"},"Setter/Getter":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Shape</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">circumference</span></span>\n    radius * <span class=\"hljs-constant\">Math::PI</span> * <span class=\"hljs-number\">2</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">circumference=</span><span class=\"hljs-params\">(value)</span></span>\n    <span class=\"hljs-keyword\">self</span>.radius = value / (<span class=\"hljs-constant\">Math::PI</span> * <span class=\"hljs-number\">2</span>)\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Inheritance":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Rectangle</span> <span class=\"hljs-inheritance\">&lt; <span class=\"hljs-parent\">Shape</span></span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">initialize</span></span>\n    <span class=\"hljs-keyword\">super</span>\n    <span class=\"hljs-ellipsis\"></span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> instance.is_a?(<span class=\"hljs-constant\">ClassName</span>)\n<span class=\"hljs-keyword\">if</span> instance.kind_of?(<span class=\"hljs-constant\">ClassName</span>)"}},"Methods":{"Defining":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">method</span></span>\n    <span class=\"hljs-ellipsis\"></span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>"},"Class methods":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyClass</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">self</span>.<span class=\"hljs-title\">method</span></span>\n    <span class=\"hljs-ellipsis\"></span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-constant\">MyClass</span>.method"},"Running a method with an arbitrary name":{"code":"obj.send <span class=\"hljs-symbol\">:method_name</span>, arg1, arg2"}},"Namespaces":{"Singleton pattern":{"code":"<span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">AppConfig</span></span>\n  extend <span class=\"hljs-keyword\">self</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read</span></span>\n    <span class=\"hljs-ellipsis\"></span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-constant\">AppConfig</span>.read","text":"<p>See: <a href=\"http://stackoverflow.com/questions/3358047/ruby-modules-and-extend-self\">extend self</a></p>\n"}},"Arrays":{"Initializing":{"code":"list = []\nlist = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>]"},"Accessing":{"code":"list[<span class=\"hljs-number\">0</span>]  <span class=\"hljs-result\">'a'</span>"},"Shorthand":{"code":"<span class=\"hljs-string\">%w[red blue]</span>  <span class=\"hljs-result\">[ 'red', 'blue' ]</span>\n%<span class=\"hljs-constant\">I</span>[red blue]  <span class=\"hljs-result\">[ :red, :blue ]</span>"},"Length":{"code":"list.size\n\nlist.empty?\nlist.any?"},"Adding items":{"code":"list.unshift <span class=\"hljs-constant\">X</span>    <span class=\"hljs-result\">[X _ _ _ _]</span>\nlist.insert <span class=\"hljs-number\">2</span>, <span class=\"hljs-constant\">X</span>  <span class=\"hljs-result\">[_ _ X _ _]</span>\nlist &lt;&lt; <span class=\"hljs-constant\">X</span>         <span class=\"hljs-result\">[_ _ _ _ X]</span>"},"Removing items":{"code":"<span class=\"hljs-comment -mini\">First:</span>\nlist.shift     <span class=\"hljs-result\"> a</span>\nlist           <span class=\"hljs-result\">[  b c d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Middle:</span>\nlist.delete <span class=\"hljs-number\">2</span>  <span class=\"hljs-result\">     c</span>\nlist           <span class=\"hljs-result\">[a b   d e]</span>\n<span class=\"hljs-hr\"></span><span class=\"hljs-comment -mini\">Last:</span>\nlist.pop       <span class=\"hljs-result\">         e</span>\nlist           <span class=\"hljs-result\">[a b c d  ]</span>"},"Removing ranges":{"code":"list.slice!(<span class=\"hljs-number\">2</span>...<span class=\"hljs-number\">4</span>)  <span class=\"hljs-result\">[    c d  ]</span>\nlist                <span class=\"hljs-result\">[a b     e]</span>"},"Subsets":{"code":"list[<span class=\"hljs-number\">0</span>...<span class=\"hljs-number\">1</span>]  <span class=\"hljs-result\">[a        ]</span>\nlist[<span class=\"hljs-number\">1</span>..-<span class=\"hljs-number\">1</span>]  <span class=\"hljs-result\">[  b c d e]</span>\nlist[<span class=\"hljs-number\">2</span>...<span class=\"hljs-number\">3</span>]  <span class=\"hljs-result\">[    c    ]</span>"},"Finding index":{"code":"list = [ a, b, c, d, a ]\nlist.index(a)  <span class=\"hljs-result\">0</span>\n<span class=\"hljs-hr\"></span>list.find_index { |item| item == a }  <span class=\"hljs-result\">0</span>"},"Checking for presence":{"code":"<span class=\"hljs-keyword\">if</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>].<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-number\">2</span>)"},"Filtering":{"code":"list.select { |user| user.age &gt; <span class=\"hljs-number\">18</span> }"}},"Types":{"Primitives":{"code":"<span class=\"hljs-constant\">Fixnum</span>\n<span class=\"hljs-constant\">Bignum</span>\n<span class=\"hljs-constant\">String</span>\n<span class=\"hljs-constant\">Integer</span>\n<span class=\"hljs-constant\">Time</span>\n<span class=\"hljs-constant\">RegExp</span>\n<span class=\"hljs-constant\">Symbol</span>"},"Booleans":{"code":"<span class=\"hljs-keyword\">true</span>\n<span class=\"hljs-keyword\">false</span>"},"Null":{"code":"<span class=\"hljs-keyword\">nil</span>"},"Type checking":{"code":"<span class=\"hljs-keyword\">if</span> obj.is_a? <span class=\"hljs-constant\">Fixnum</span>"},"Casting":{"code":"obj.to_s\nobj.to_i\nobj.to_f"}},"Conditionals":{"If-then-else":{"code":"<span class=\"hljs-keyword\">if</span> a == b\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">elsif</span> b != c\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">else</span>\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">end</span>"},"Negative":{"code":"<span class=\"hljs-keyword\">unless</span> list.empty?\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">end</span>"},"Single-line syntax":{"code":"<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">if</span> a == b"},"Switch-case":{"code":"<span class=\"hljs-keyword\">case</span> day\n<span class=\"hljs-keyword\">when</span> <span class=\"hljs-string\">'Monday'</span>\n  work\n<span class=\"hljs-keyword\">when</span> <span class=\"hljs-string\">'Tuesday'</span>\n<span class=\"hljs-keyword\">when</span> <span class=\"hljs-string\">'Wednesday'</span>\n  train\n<span class=\"hljs-keyword\">else</span>\n  sleep\n<span class=\"hljs-keyword\">end</span>"},"And-or":{"code":"<span class=\"hljs-keyword\">if</span> a &amp;&amp; b\n<span class=\"hljs-keyword\">if</span> c || d"},"Ternary":{"code":"name == <span class=\"hljs-string\">'john'</span> ? <span class=\"hljs-string\">'yes'</span> <span class=\"hljs-symbol\">:</span> <span class=\"hljs-string\">'no'</span>"}},"Numbers":{"Operations":{"code":"<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">10</span> - <span class=\"hljs-number\">5</span>\n<span class=\"hljs-number\">5</span> * <span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">11</span> / <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">5</span>\n<span class=\"hljs-number\">11.0</span> / <span class=\"hljs-number\">2</span>    <span class=\"hljs-result\">5.5</span>\n<span class=\"hljs-number\">11</span> % <span class=\"hljs-number\">2</span>      <span class=\"hljs-result\">1</span>"},"Rounding off":{"code":"(<span class=\"hljs-number\">2.5</span>).to_i    <span class=\"hljs-result\">2</span>\n(<span class=\"hljs-number\">2.5</span>).floor   <span class=\"hljs-result\">2</span>\n(<span class=\"hljs-number\">2.5</span>).ceil    <span class=\"hljs-result\">3</span>\n(<span class=\"hljs-number\">2.5</span>).round   <span class=\"hljs-result\">3</span>"},"Minimum and maximum":{"code":"[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>].min   <span class=\"hljs-result\">2</span>\n[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>].max   <span class=\"hljs-result\">4</span>"},"Exponents":{"code":"<span class=\"hljs-number\">2</span>**<span class=\"hljs-number\">8</span>   <span class=\"hljs-result\">256</span>"},"Trigonometry":{"code":"<span class=\"hljs-constant\">Math</span>.sin(theta)\n<span class=\"hljs-constant\">Math::PI</span>"}},"Strings":{"Literals":{"code":"<span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-string\">'world'</span>\n<span class=\"hljs-string\">%[hello]</span>"},"Symbols":{"code":"<span class=\"hljs-symbol\">:hello</span>"},"Interpolation":{"code":"<span class=\"hljs-string\">\"Hello, <span class=\"hljs-subst\">#{name}</span>\"</span>"},"Concatenation":{"code":"<span class=\"hljs-string\">'Hello, '</span> + name"},"Formatting":{"code":"<span class=\"hljs-string\">'Hello, %s from %s'</span> % [ name, city ]"},"Length":{"code":"<span class=\"hljs-string\">'Hello'</span>.size"},"Substring":{"code":"<span class=\"hljs-string\">'Hi world'</span>[<span class=\"hljs-number\">0</span>...<span class=\"hljs-number\">2</span>]  <span class=\"hljs-result\">'Hi'</span>\n<span class=\"hljs-string\">'Hi world'</span>[<span class=\"hljs-number\">3</span>..-<span class=\"hljs-number\">1</span>]  <span class=\"hljs-result\">'world'</span>\n<span class=\"hljs-string\">'Hi world'</span>[<span class=\"hljs-number\">3</span>..<span class=\"hljs-number\">5</span>]   <span class=\"hljs-result\">'wo'</span>"},"Search":{"code":"<span class=\"hljs-string\">'Hi'</span>.index(<span class=\"hljs-string\">'o'</span>)  <span class=\"hljs-result\">4</span>\n<span class=\"hljs-string\">'Hi'</span>.index(<span class=\"hljs-string\">'x'</span>)  <span class=\"hljs-result\">nil</span>\n\n<span class=\"hljs-string\">'Hello'</span>.<span class=\"hljs-keyword\">include</span>?(<span class=\"hljs-string\">'llo'</span>)  <span class=\"hljs-result\">true</span>\n<span class=\"hljs-string\">'Hello'</span> =~ <span class=\"hljs-regexp\">/llo/</span>         <span class=\"hljs-result\">true</span>"},"Case":{"code":"<span class=\"hljs-string\">'Hello'</span>.upcase\n<span class=\"hljs-string\">'Hello'</span>.downcase"},"Replace":{"code":"<span class=\"hljs-string\">'Hi'</span>.gsub(<span class=\"hljs-regexp\">/o/</span>, <span class=\"hljs-string\">'ello'</span>)  <span class=\"hljs-comment -mini\">(replace all)</span>\nstr.gsub!(<span class=\"hljs-regexp\">/o/</span>, <span class=\"hljs-string\">'ello'</span>)  <span class=\"hljs-comment -mini\">(in place)</span>"},"Advanced replace":{"code":"str.gsub(<span class=\"hljs-regexp\">/age: (\\d+)/</span>) { <span class=\"hljs-string\">\"edad: <span class=\"hljs-subst\">#{<span class=\"hljs-variable\">$1</span>}</span>\"</span> }\n<span class=\"hljs-comment -mini\">Changes <code>&#39;age: 12&#39;</code> to <code>&#39;edad: 12&#39;</code></span>"}},"Dictionaries":{"Type":{"code":"<span class=\"hljs-constant\">Hash</span><a class=\"hljs-doclink\" href=\"http://www.ruby-doc.org/core-2.2.0/Hash.html\"></a>"},"Literals":{"code":"colors = {\n  <span class=\"hljs-symbol\">apple:</span> <span class=\"hljs-string\">'red'</span>,\n  <span class=\"hljs-symbol\">grape:</span> <span class=\"hljs-string\">'purple'</span>\n}\n<span class=\"hljs-hr\"></span>colors = { <span class=\"hljs-comment\"># String keys</span>\n  <span class=\"hljs-string\">'apple'</span> =&gt; <span class=\"hljs-string\">'red'</span>,\n  <span class=\"hljs-string\">'grape'</span> =&gt; <span class=\"hljs-string\">'purple'</span>\n}"},"Access":{"code":"colors[<span class=\"hljs-symbol\">:banana</span>] = <span class=\"hljs-string\">'yellow'</span>"},"Setting":{"code":"color[<span class=\"hljs-symbol\">:banana</span>] = <span class=\"hljs-string\">'yellow'</span>"},"List keys":{"code":"colors.keys"},"List values":{"code":"colors.values"},"Iterating":{"code":"colors.each <span class=\"hljs-keyword\">do</span> |key, val|<a class=\"hljs-doclink\" href=\"http://www.ruby-doc.org/core-2.2.0/Hash.html#method-i-each\"></a>\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">end</span>"}},"Exceptions":{"Try/catch":{"code":"<span class=\"hljs-keyword\">begin</span> <span class=\"hljs-keyword\">do</span>\n  raise <span class=\"hljs-constant\">Error</span>, <span class=\"hljs-string\">'hello'</span>\n<span class=\"hljs-keyword\">rescue</span> <span class=\"hljs-constant\">Error</span> =&gt; e\n  puts <span class=\"hljs-string\">\"Caught error: <span class=\"hljs-subst\">#{e.message}</span>\"</span>\n<span class=\"hljs-keyword\">ensure</span>\n  puts <span class=\"hljs-string\">\"I'm after the clause\"</span>\n<span class=\"hljs-keyword\">end</span>"}},"Iterables":{"Iterating":{"code":"list.each <span class=\"hljs-keyword\">do</span> |item|\n  <span class=\"hljs-ellipsis\"></span>\n<span class=\"hljs-keyword\">end</span>"},"Map":{"code":"list.map <span class=\"hljs-keyword\">do</span> |item|\n  use(item)\n<span class=\"hljs-keyword\">end</span>"},"Reduce":{"code":"list.inject <span class=\"hljs-keyword\">do</span> |result, item|\n  result += item\n  result\nlist"}},"Modules":{"Importing":{"code":"<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">'fileutils'</span>"}},"String representation":{"Getting":{"code":"obj.to_s\nobj.inspect"},"Overriding":{"code":"<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">to_s</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">inspect</span></span>"}},"Printing":{"Printing":{"code":"puts <span class=\"hljs-string\">\"hello\"</span>\n<span class=\"hljs-variable\">$stdout</span> &lt;&lt; <span class=\"hljs-string\">\"hello\\n\"</span>"},"Error output":{"code":"<span class=\"hljs-variable\">$stderr</span> &lt;&lt; <span class=\"hljs-string\">\"oh no\\n\"</span>"}},"File API":{"Reading":{"code":"d = <span class=\"hljs-constant\">File</span>.read(<span class=\"hljs-string\">'file.txt'</span>)"},"Writing":{"code":"<span class=\"hljs-constant\">File</span>.write(<span class=\"hljs-string\">'file.txt'</span>, data)\n<span class=\"hljs-constant\">File</span>.write(<span class=\"hljs-string\">'file.txt'</span>) { data }"}},"System":{"Environment variables":{"code":"<span class=\"hljs-constant\">ENV</span>[<span class=\"hljs-string\">'DATABASE_URL'</span>]"},"Arguments parsing":{"code":"<span class=\"hljs-variable\">$ARGV</span>"}}}}}}}
);
